#!/usr/bin/env ruby
# wordchomp - given set of letters, generate sets of words that use them all
# Andrew Ho (andrew@zeuscat.com)

require 'multimap'

ME = File.basename(__FILE__)
USAGE = "usage: #{ME} letters"

# Given set of letters, generate set partition, look for matches in dictionary
def main(argv = ARGV)
  retval = 1   # Program exit status; zero means success, non-zero means error
  if argv.empty?
    $stderr.puts USAGE
  else
    dict = AnagramDictionary.new
    word = argv.join.strip
    word.upcase_letters.partitions do |partition|
      candidates = partition.collect { |letters| dict.lookup(letters.join) }
      if candidates.all? { |words| !words.empty? }
        puts candidates.collect { |words| words.join(' ') }.join(' | ')
        retval = 0
      end
    end
  end
  retval
end

# Given a word, return any dictionary words that are anagrams for that word
class AnagramDictionary
  # Only return solutions with this many letters
  MINIMUM_SIZE = 4

  # OSPD3 from http://www.calvin.edu/~rpruim/scrabble/ospd3.txt
  DEFAULT_FILENAME = File.join(File.dirname(__FILE__), 'ospd3.txt')

  def initialize(filename = DEFAULT_FILENAME)
    @dict = Multimap.new
    File.open(filename).each do |word|
      word.strip!
      k = key(word)
      @dict[k] = word if k.size >= MINIMUM_SIZE
    end
  end

  def lookup(word)
    @dict[key(word)]
  end

  private

  # Normalize word to an anagram hash key of sorted uppercase letters
  def key(word)
    word.upcase_letters.sort.join
  end
end

# Split a string into uppercase letters only
class String
  def upcase_letters
    self.upcase.split(//).select { |c| c >= 'A' && c <= 'Z' }
  end
end

# Return the partition of the set represented by an array
# (http://en.wikipedia.org/wiki/Partition_of_a_set)
# (http://stackoverflow.com/a/2037581)
class Array
  def partitions
    yield [] if self.empty?
    (0 ... 2 ** self.size / 2).each do |i|
      parts = [[], []]
      self.each do |item|
        parts[i & 1] << item
        i >>= 1
      end
      parts[1].partitions do |b|
        result = [parts[0]] + b
        result = result.reject { |e| e.empty? }
        yield result
      end
    end
  end
end

# Run main loop and exit with success if any solutions were found
exit main ARGV
